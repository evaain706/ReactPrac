{"ast":null,"code":"import { legacy_createStore as createStore } from 'redux';\nexport const INCREMENT = 'increment'; //redux 코드가 많아질때 type선언,적용부분에서 실수를 방지하기위해 상수로 만들어서 export -> 사용하는 컴포넌트에서 import해서 사용하도록\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //state 선언\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\n      showCounter: state.showCounter //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\n    };\n  }\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;\n\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함","map":{"version":3,"names":["legacy_createStore","createStore","INCREMENT","initialState","counter","showCounter","counterReducer","state","action","type","amount","store"],"sources":["C:/Users/aaa/Desktop/ReactPrac/Redux-Counter/src/store/index.js"],"sourcesContent":["import { legacy_createStore as createStore } from 'redux';\r\n\r\n\r\nexport const INCREMENT = 'increment'; //redux 코드가 많아질때 type선언,적용부분에서 실수를 방지하기위해 상수로 만들어서 export -> 사용하는 컴포넌트에서 import해서 사용하도록\r\n\r\n\r\n\r\nconst initialState = {counter:0,showCounter:true}; //state 선언\r\n\r\nconst counterReducer = (state = initialState ,action) => {\r\n\r\n    if(action.type === 'increment'){\r\n        return{\r\n            counter:state.counter +1,  //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\r\n            showCounter:state.showCounter  //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\r\n        }\r\n    }\r\n\r\n    if(action.type === 'increase'){\r\n        return{\r\n            counter:state.counter + action.amount,\r\n            showCounter:state.showCounter,\r\n        }\r\n    }\r\n\r\n\r\n    if(action.type === 'decrement'){\r\n        return{\r\n            counter: state.counter -1,\r\n            showCounter:state.showCounter,\r\n        }\r\n    }\r\n\r\n    if(action.type === 'toggle'){\r\n        return{\r\n            showCounter: !state.showCounter,\r\n            counter:state.counter,\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\n\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n\r\n\r\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,WAAW,QAAQ,OAAO;AAGzD,OAAO,MAAMC,SAAS,GAAG,WAAW,CAAC,CAAC;;AAItC,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAC,CAAC;EAACC,WAAW,EAAC;AAAI,CAAC,CAAC,CAAC;;AAEnD,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EAErD,IAAGA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAC;IAC3B,OAAM;MACFL,OAAO,EAACG,KAAK,CAACH,OAAO,GAAE,CAAC;MAAG;MAC3BC,WAAW,EAACE,KAAK,CAACF,WAAW,CAAE;IACnC,CAAC;EACL;EAEA,IAAGG,MAAM,CAACC,IAAI,KAAK,UAAU,EAAC;IAC1B,OAAM;MACFL,OAAO,EAACG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,MAAM;MACrCL,WAAW,EAACE,KAAK,CAACF;IACtB,CAAC;EACL;EAGA,IAAGG,MAAM,CAACC,IAAI,KAAK,WAAW,EAAC;IAC3B,OAAM;MACFL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAE,CAAC;MACzBC,WAAW,EAACE,KAAK,CAACF;IACtB,CAAC;EACL;EAEA,IAAGG,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAC;IACxB,OAAM;MACFJ,WAAW,EAAE,CAACE,KAAK,CAACF,WAAW;MAC/BD,OAAO,EAACG,KAAK,CAACH;IAClB,CAAC;EACL;EACA,OAAOG,KAAK;AAChB,CAAC;AAKD,MAAMI,KAAK,GAAGV,WAAW,CAACK,cAAc,CAAC;AAEzC,eAAeK,KAAK;;AAGpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}