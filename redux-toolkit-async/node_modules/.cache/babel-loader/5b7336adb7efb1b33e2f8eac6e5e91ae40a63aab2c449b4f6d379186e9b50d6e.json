{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const isExist = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!isExist) {\n        //장바구니에 존재하지않는 상품 추가시\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        }); //redux toolkit 에서는 push 사용가능\n      } else {\n        //이미 장바구니에 담아놓은 상품 다시 추가시\n        isExist.quantity = isExist.quantity + 1;\n        isExist.totalPrice = isExist.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const isExist = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (isExist.quantity === 1) {\n        //장바구니에 상품수량이 1일때\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        //1이 아닐때는 수량을 1줄이고 해당상품 총 수량에서 1개수량만큼의 가격 빼기\n        isExist.quantity--;\n        isExist.totalPrice = isExist.totalPrice - isExist.price;\n      }\n    }\n  }\n});\nconst sendCartData = cartData => {\n  return dispatch => {\n    dispatch();\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","replaceCart","state","action","payload","addItemToCart","newItem","isExist","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cartData","dispatch","cartActions","actions","reducer"],"sources":["C:/Users/aaa/Desktop/ReactPrac/redux-toolkit-async/src/store/mycart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst cartSlice = createSlice({\r\nname: 'cart',\r\n\r\ninitialState:{\r\n    items:[],\r\n    totalQuantity:0,\r\n    totalAmount:0,\r\n},\r\n\r\nreducers: {\r\n  replaceCart(state,action){\r\n    state.totalQuantity = action.payload.totalQuantity;\r\n    state.items = action.payload.items;\r\n\r\n  },\r\n\r\n\r\n addItemToCart(state,action) {\r\n  const newItem = action.payload;\r\n  const isExist = state.items.find(item => item.id === newItem.id);\r\n  state.totalQuantity++;\r\n  if(!isExist){ //장바구니에 존재하지않는 상품 추가시\r\n    state.items.push({\r\n    id: newItem.id,\r\n    price:newItem.price,\r\n    quantity:1,\r\n    totalPrice:newItem.price,\r\n    name:newItem.title\r\n    }); //redux toolkit 에서는 push 사용가능\r\n    \r\n  } else { //이미 장바구니에 담아놓은 상품 다시 추가시\r\n    isExist.quantity = isExist.quantity +1 ;\r\n    isExist.totalPrice = isExist.totalPrice + newItem.price;\r\n  }\r\n },\r\n removeItemFromCart(state,action) {\r\n    const id = action.payload;\r\n    const isExist = state.items.find(item => item.id === id);\r\n    state.totalQuantity--;\r\n    if(isExist.quantity === 1){ //장바구니에 상품수량이 1일때\r\n        state.items = state.items.filter(item => item.id !== id);\r\n\r\n    }else{ //1이 아닐때는 수량을 1줄이고 해당상품 총 수량에서 1개수량만큼의 가격 빼기\r\n        isExist.quantity--;\r\n        isExist.totalPrice = isExist.totalPrice - isExist.price;\r\n    }\r\n\r\n }\r\n\r\n},\r\n\r\n\r\n})\r\n\r\n\r\nconst sendCartData = (cartData) => {\r\n  return (dispatch) => {\r\n    dispatch();\r\n  };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC9BE,IAAI,EAAE,MAAM;EAEZC,YAAY,EAAC;IACTC,KAAK,EAAC,EAAE;IACRC,aAAa,EAAC,CAAC;IACfC,WAAW,EAAC;EAChB,CAAC;EAEDC,QAAQ,EAAE;IACRC,WAAWA,CAACC,KAAK,EAACC,MAAM,EAAC;MACvBD,KAAK,CAACJ,aAAa,GAAGK,MAAM,CAACC,OAAO,CAACN,aAAa;MAClDI,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO,CAACP,KAAK;IAEpC,CAAC;IAGFQ,aAAaA,CAACH,KAAK,EAACC,MAAM,EAAE;MAC3B,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B,MAAMG,OAAO,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MAChER,KAAK,CAACJ,aAAa,EAAE;MACrB,IAAG,CAACS,OAAO,EAAC;QAAE;QACZL,KAAK,CAACL,KAAK,CAACc,IAAI,CAAC;UACjBD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAACN,OAAO,CAACM,KAAK;UACnBC,QAAQ,EAAC,CAAC;UACVC,UAAU,EAACR,OAAO,CAACM,KAAK;UACxBjB,IAAI,EAACW,OAAO,CAACS;QACb,CAAC,CAAC,CAAC,CAAC;MAEN,CAAC,MAAM;QAAE;QACPR,OAAO,CAACM,QAAQ,GAAGN,OAAO,CAACM,QAAQ,GAAE,CAAC;QACtCN,OAAO,CAACO,UAAU,GAAGP,OAAO,CAACO,UAAU,GAAGR,OAAO,CAACM,KAAK;MACzD;IACD,CAAC;IACDI,kBAAkBA,CAACd,KAAK,EAACC,MAAM,EAAE;MAC9B,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,OAAO,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MACxDR,KAAK,CAACJ,aAAa,EAAE;MACrB,IAAGS,OAAO,CAACM,QAAQ,KAAK,CAAC,EAAC;QAAE;QACxBX,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACoB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAE5D,CAAC,MAAI;QAAE;QACHH,OAAO,CAACM,QAAQ,EAAE;QAClBN,OAAO,CAACO,UAAU,GAAGP,OAAO,CAACO,UAAU,GAAGP,OAAO,CAACK,KAAK;MAC3D;IAEH;EAED;AAGA,CAAC,CAAC;AAGF,MAAMM,YAAY,GAAIC,QAAQ,IAAK;EACjC,OAAQC,QAAQ,IAAK;IACnBA,QAAQ,CAAC,CAAC;EACZ,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG3B,SAAS,CAAC4B,OAAO;AAE5C,eAAe5B,SAAS,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}