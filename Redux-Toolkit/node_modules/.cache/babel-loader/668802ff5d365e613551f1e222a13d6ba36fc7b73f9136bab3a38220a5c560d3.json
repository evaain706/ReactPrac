{"ast":null,"code":"import { legacy_createStore as createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter-slice';\nimport authReducer from './auth-slice';\n\n// const initialCounterState = {counter:0,showCounter:true}; //state 선언\n\n// //redux toolkit 사용\n// const counterSlice = createSlice({ \n//  name:'counter', //slice이름\n//  initialState: initialCounterState, //초기상태\n//  reducers: { //메소드\n//     increment(state) {\n//         state.counter++; //return 작성없이 내부적으로 작동함\n//     },\n\n//     decrement(state) {\n//         state.counter--;\n//     },\n//     increase(state,action) {\n//         state.counter = state.counter + action.payload;\n//     },\n//     toggleCounter(state) {\n\n//         state.showCounter = !state.showCounter;\n//     }\n//  }\n\n// });\n\n// const initialAuthState = {\n//     isAuth:false\n// };\n\n// const authSlice = createSlice({\n//  name:'auth',\n//  initialState: initialAuthState,\n//  reducers:{\n//     login(state) {\n//         state.isAuth = true;\n//         console.log(state.isAuth);\n//     },\n\n//     logout(state) {\n//         state.isAuth = false;\n//         console.log(state.isAuth);\n//     }\n//  }\n\n// })\n\n//redux사용\n// const counterReducer = (state = initialState ,action) => {\n\n//     if(action.type === 'increment'){\n//         return{\n//             counter:state.counter +1,  //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\n//             showCounter:state.showCounter  //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\n//         }\n//     }\n\n//     if(action.type === 'increase'){\n//         return{\n//             counter:state.counter + action.amount,\n//             showCounter:state.showCounter,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter -1,\n//             showCounter:state.showCounter,\n//         }\n//     }\n\n//     if(action.type === 'toggle'){\n//         return{\n//             showCounter: !state.showCounter,\n//             counter:state.counter,\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  } // reducer: counterSlice.reducer  reducer:{counter:counterSlice.reducer\n}); //객체형식으로 여러 reducer를 병합가능\n\nexport default store;\n\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함","map":{"version":3,"names":["legacy_createStore","createStore","createSlice","configureStore","counterReducer","authReducer","store","reducer","counter","auth"],"sources":["C:/Users/aaa/Desktop/ReactPrac/Redux-Toolkit/src/store/index.js"],"sourcesContent":["import { legacy_createStore as createStore } from 'redux';\r\nimport { createSlice,configureStore } from '@reduxjs/toolkit';\r\n\r\nimport counterReducer from './counter-slice';\r\nimport authReducer from './auth-slice';\r\n\r\n\r\n// const initialCounterState = {counter:0,showCounter:true}; //state 선언\r\n\r\n// //redux toolkit 사용\r\n// const counterSlice = createSlice({ \r\n//  name:'counter', //slice이름\r\n//  initialState: initialCounterState, //초기상태\r\n//  reducers: { //메소드\r\n//     increment(state) {\r\n//         state.counter++; //return 작성없이 내부적으로 작동함\r\n//     },\r\n\r\n//     decrement(state) {\r\n//         state.counter--;\r\n//     },\r\n//     increase(state,action) {\r\n//         state.counter = state.counter + action.payload;\r\n//     },\r\n//     toggleCounter(state) {\r\n\r\n//         state.showCounter = !state.showCounter;\r\n//     }\r\n//  }\r\n\r\n// });\r\n\r\n// const initialAuthState = {\r\n//     isAuth:false\r\n// };\r\n\r\n// const authSlice = createSlice({\r\n//  name:'auth',\r\n//  initialState: initialAuthState,\r\n//  reducers:{\r\n//     login(state) {\r\n//         state.isAuth = true;\r\n//         console.log(state.isAuth);\r\n//     },\r\n\r\n//     logout(state) {\r\n//         state.isAuth = false;\r\n//         console.log(state.isAuth);\r\n//     }\r\n//  }\r\n\r\n// })\r\n\r\n//redux사용\r\n// const counterReducer = (state = initialState ,action) => {\r\n\r\n//     if(action.type === 'increment'){\r\n//         return{\r\n//             counter:state.counter +1,  //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\r\n//             showCounter:state.showCounter  //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'increase'){\r\n//         return{\r\n//             counter:state.counter + action.amount,\r\n//             showCounter:state.showCounter,\r\n//         }\r\n//     }\r\n\r\n\r\n//     if(action.type === 'decrement'){\r\n//         return{\r\n//             counter: state.counter -1,\r\n//             showCounter:state.showCounter,\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'toggle'){\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter:state.counter,\r\n//         }\r\n//     }\r\n//     return state;\r\n// };\r\n\r\n\r\n\r\n\r\nconst store = configureStore({\r\n   reducer:{counter: counterReducer,auth: authReducer},   // reducer: counterSlice.reducer  reducer:{counter:counterSlice.reducer\r\n}); //객체형식으로 여러 reducer를 병합가능\r\n\r\n\r\nexport default store;\r\n\r\n\r\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,WAAW,QAAQ,OAAO;AACzD,SAASC,WAAW,EAACC,cAAc,QAAQ,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAOC,WAAW,MAAM,cAAc;;AAGtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC1BI,OAAO,EAAC;IAACC,OAAO,EAAEJ,cAAc;IAACK,IAAI,EAAEJ;EAAW,CAAC,CAAI;AAC1D,CAAC,CAAC,CAAC,CAAC;;AAGJ,eAAeC,KAAK;;AAGpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}