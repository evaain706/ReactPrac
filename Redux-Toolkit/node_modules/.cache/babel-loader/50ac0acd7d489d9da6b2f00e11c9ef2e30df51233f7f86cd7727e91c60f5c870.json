{"ast":null,"code":"import { legacy_createStore as createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; //state 선언\n\n//redux toolkit 사용\nconst counterSlice = createSlice({\n  name: 'counter',\n  //slice이름\n  initialState: initialCounterState,\n  //초기상태\n  reducers: {\n    //메소드\n    increment(state) {\n      state.counter++; //return 작성없이 내부적으로 작동함\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuth: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuth = true;\n    },\n    logout(state) {\n      state.isAuth = false;\n    }\n  }\n});\n\n//redux사용\n// const counterReducer = (state = initialState ,action) => {\n\n//     if(action.type === 'increment'){\n//         return{\n//             counter:state.counter +1,  //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\n//             showCounter:state.showCounter  //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\n//         }\n//     }\n\n//     if(action.type === 'increase'){\n//         return{\n//             counter:state.counter + action.amount,\n//             showCounter:state.showCounter,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter -1,\n//             showCounter:state.showCounter,\n//         }\n//     }\n\n//     if(action.type === 'toggle'){\n//         return{\n//             showCounter: !state.showCounter,\n//             counter:state.counter,\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer // reducer: counterSlice.reducer  reducer:{counter:counterSlice.reducer\n}); //객체형식으로 여러 reducer를 병합가능\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함","map":{"version":3,"names":["legacy_createStore","createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuth","authSlice","login","logout","store","reducer","counterActions","actions"],"sources":["C:/Users/aaa/Desktop/ReactPrac/Redux-Toolkit/src/store/index.js"],"sourcesContent":["import { legacy_createStore as createStore } from 'redux';\r\nimport { createSlice,configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialCounterState = {counter:0,showCounter:true}; //state 선언\r\n\r\n//redux toolkit 사용\r\nconst counterSlice = createSlice({ \r\n name:'counter', //slice이름\r\n initialState: initialCounterState, //초기상태\r\n reducers: { //메소드\r\n    increment(state) {\r\n        state.counter++; //return 작성없이 내부적으로 작동함\r\n    },\r\n\r\n    decrement(state) {\r\n        state.counter--;\r\n    },\r\n    increase(state,action) {\r\n        state.counter = state.counter + action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n\r\n        state.showCounter = !state.showCounter;\r\n    }\r\n }\r\n\r\n});\r\n\r\nconst initialAuthState = {\r\n    isAuth:false\r\n};\r\n\r\nconst authSlice = createSlice({\r\n name:'auth',\r\n initialState: initialAuthState,\r\n reducers:{\r\n    login(state) {\r\n        state.isAuth = true;\r\n    },\r\n\r\n    logout(state) {\r\n        state.isAuth = false;\r\n    }\r\n }\r\n\r\n})\r\n\r\n//redux사용\r\n// const counterReducer = (state = initialState ,action) => {\r\n\r\n//     if(action.type === 'increment'){\r\n//         return{\r\n//             counter:state.counter +1,  //initialstate에 counter, showCounter 두개의 상태가 존재하므로 둘중 하나가 변하지 않더라도 return은 모두해줘야함\r\n//             showCounter:state.showCounter  //즉,reducer에서 상태를 업데이트할 때 모든 상태를 포함한 객체를 반환해야함\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'increase'){\r\n//         return{\r\n//             counter:state.counter + action.amount,\r\n//             showCounter:state.showCounter,\r\n//         }\r\n//     }\r\n\r\n\r\n//     if(action.type === 'decrement'){\r\n//         return{\r\n//             counter: state.counter -1,\r\n//             showCounter:state.showCounter,\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'toggle'){\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter:state.counter,\r\n//         }\r\n//     }\r\n//     return state;\r\n// };\r\n\r\n\r\n\r\n\r\nconst store = configureStore({\r\n   reducer:counterSlice.reducer   // reducer: counterSlice.reducer  reducer:{counter:counterSlice.reducer\r\n}); //객체형식으로 여러 reducer를 병합가능\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;\r\n\r\n\r\n//redux에서 절대 기존의 state 변경 X , 새로운 state 객체를 return하여 항상 재정의 해줘야함"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,WAAW,QAAQ,OAAO;AACzD,SAASC,WAAW,EAACC,cAAc,QAAQ,kBAAkB;AAG7D,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAC,CAAC;EAACC,WAAW,EAAC;AAAI,CAAC,CAAC,CAAC;;AAE1D;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAChCM,IAAI,EAAC,SAAS;EAAE;EAChBC,YAAY,EAAEL,mBAAmB;EAAE;EACnCM,QAAQ,EAAE;IAAE;IACTC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE,CAAC,CAAC;IACrB,CAAC;IAEDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAACG,MAAM,EAAE;MACnBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MAEjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACH;AAED,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACrBC,MAAM,EAAC;AACX,CAAC;AAED,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC7BM,IAAI,EAAC,MAAM;EACXC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAC;IACNW,KAAKA,CAACT,KAAK,EAAE;MACTA,KAAK,CAACO,MAAM,GAAG,IAAI;IACvB,CAAC;IAEDG,MAAMA,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,MAAM,GAAG,KAAK;IACxB;EACH;AAED,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EAC1BqB,OAAO,EAACjB,YAAY,CAACiB,OAAO,CAAG;AAClC,CAAC,CAAC,CAAC,CAAC;;AAEJ,OAAO,MAAMC,cAAc,GAAGlB,YAAY,CAACmB,OAAO;AAClD,eAAeH,KAAK;;AAGpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}